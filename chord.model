var m : 1..5 = 3;
var N : pow(2,1)-1..pow(2,5)-1 = pow(2,3) - 1;
type num : 0..7;
type int : 0..9999;
var alwaysUp: 0..7 = 0;
type FingerTableEntry : record {
	strt : num,
	suc : 0..8,
}
type FingerTable : Array<FingerTableEntry>[1..3];
type Node : either {
  Absent {
	nodeID : 0..8
  },
  Present {
  nodeID : 0..7,
  predecessor : 0..8, //8 being considered as nil
  fingerTable : FingerTable,
  }
};
var nil : Node = Absent {nodeID : 8};

var time: Time = 10;
var active : 0..N = 1;

var ring: Array<Node>[num];

function init(id : 0..N) {
	var i : 0..N = 0;
	for node in ring {
		node = Absent {
			nodeID : i,
		};
		i+=1;
	}
	var fingerTable: Array<FingerTableEntry>[1..3];
	i = 1;
	while i <= m {
		fingerTable[i] = FingerTableEntry {
			strt: (id + pow(2, i-1))%(N+1),
			suc: id,
		};
	i+=1;
	}		
	ring[id] = Present {
		nodeID : id, predecessor : id, fingerTable : fingerTable
	};
}

init(alwaysUp);

function periodicStabilize(){
	for node in ring {
		match node {
			Present(data){
				stabilize(data.nodeID);
			}
			Absent{}
		}
	}
}

function periodicFixFingers(){
for node in ring {
		match node {
			Present(data){
				fixFingers1(data.nodeID);
			}
			Absent{}
		}
	}
}
rule periodicStabilize{
	periodicStabilize();
}
rule periodicFixFingers{
	periodicFixFingers();
}

function findClosestPreceedingFinger (n : Node, id : 0..N) -> Node {
	match n {
		Absent{}
		Present (data) {
			var i : int = m;
			while i >= 1 {
				var entry : FingerTableEntry = data.fingerTable[i];
				if(isNodeBetween(data.nodeID, id, entry.suc, 0)){
					match ring[entry.suc] {
						Present{
							return ring[entry.suc];
						}
						Absent{}
					}
				}
				i = i - 1;
			}
			return n;
		}
	}
}

function findPredecessor (n : Node, id : 0..N) -> Node {
	match n {
		Absent (data) {}
		Present (data) {
			var temp : int = data.nodeID; //nodeID of n'
			var temp1 : int = data.fingerTable[1].suc; //Successor of n'
			while (!isNodeBetween(temp, temp1, id, 1)){
				var tempNode : Node = findClosestPreceedingFinger(n, id);
				match tempNode {
					Absent{}
					Present (data1) {
						if(temp==data1.nodeID){
							break;
						}
						temp = data1.nodeID;
						temp1 = data1.fingerTable[1].suc;
					}
				}
			}
			return ring[temp];
		}
	}
}


function findSuccessor (n : Node, id : 0..N) -> Node {
	var temp : Node = n;
	match temp {
		Absent {}
		Present (data) {
			temp = findPredecessor (temp, id);
			match temp {
				Absent{}
				Present(data1){
					var entry : FingerTableEntry = data1.fingerTable[1];
					return ring[entry.suc];
				}
			}
		}
	}
}

function fixFingers1(n : 0..N){
	var randIndex : 2..m = urandomRange(2,m);
	match ring[n]{
		Present (data) {
			var nn : Node = findSuccessor(ring[n], data.fingerTable[randIndex].strt);
			match nn {
				Present (data1) {
					var fingerTable : FingerTable;
					var i : int = 1;
					while i<=m{
						fingerTable[i].strt = data.fingerTable[i].strt;
						fingerTable[i].suc = data.fingerTable[i].suc;
						i+=1;
					}
					fingerTable[randIndex].suc = data1.nodeID;
					ring[n] = Present {nodeID : data.nodeID, predecessor : data.predecessor, fingerTable : fingerTable};
				}
				Absent{}
			}
		}
		Absent{}
	}
}

function getIDFromNode(n : Node)->num{
	match n{
		Absent(data){
			return data.nodeID;
		}
		Present(data){
			return data.nodeID;
		}
	}
}

function isNodeBetween (n1 : 0..N, n2 : 0..N, id : 0..N, param : 0..3) -> Boolean {
	if (n1 < n2){
		if(param==0){
			if (id > n1 && id < n2){return True;} return False;
		}else if(param==1){
			if (id > n1 && id <= n2){return True;} return False;
		}else if(param==2){
			if (id >= n1 && id < n2){return True;} return False;
		}else{
			if (id >= n1 && id <= n2){return True;}	return False;
		}
	}else if (n1 > n2){
		if(param==0){
			if (id >= n2 && id <= n1){return False;} return True;
		}else if(param==1){
			if (id > n2 && id <= n1){return False;}	return True;
		}else if(param==2){
			if (id >= n2 && id < n1){return False;} return True;
		}else{
			if (id > n2 && id < n1){return False;} return True;
		}
	}else{
		return True;
	}
}

function pow(a : 0..5, b : 1..5) -> 1..3125 {
	var ans : 1..3125 = 1;
	var	i : 0..5 = 0;
	while i < a {
		ans*=b;
	}
	return ans;
}

rule ToggleNode for node in ring{
	toggleNode(node);		
}

function toggleNode (node : Node) {
	match node {
		Absent (data){
				var temp : Node = findSuccessor(ring[alwaysUp], data.nodeID);
				match temp {
					Absent{}
					Present (data1){
						ring[data.nodeID] = Present {
							nodeID : data.nodeID, predecessor : 8, fingerTable : createEmptyFingerTable(data.nodeID, data1.nodeID)
						};
						active+=1;
					}
				}
		}
		Present (data){
			if(active > 1){
				ring[data.nodeID] = Absent{nodeID:data.nodeID};
				active-=1;
			}
		}
	}
}

function createEmptyFingerTable(id : 0..N, suc : 0..7)->FingerTable{
	var fingerTable : FingerTable;
	var i : int = 1;
	while i <= m {
		fingerTable[i] = FingerTableEntry {
			strt: (id + pow(2, i-1))%(N+1),
			suc: 0,
		};
	i+=1;
	}
	fingerTable[1].suc = suc;
	return fingerTable;
}

function stabilize (n : 0..N){
	match ring[n]{
		Present(data){
			match ring[data.fingerTable[1].suc] {
				Present(data1){
					var x : 0..8 = data1.predecessor;
					if(isNodeBetween(data.nodeID, data.fingerTable[1].suc, x, 0)){
						var fingerTable : FingerTable;
						var i : int = 1;
						while i<=m{
							fingerTable[i].strt = data.fingerTable[i].strt;
							fingerTable[i].suc = data.fingerTable[i].suc;
							i+=1;
						}
						fingerTable[1].suc = x;
						ring[n] = Present {nodeID : data.nodeID, predecessor : data.predecessor, fingerTable : fingerTable};
					}
					notify(data.fingerTable[1].suc, n);
					notify(n, data.fingerTable[1].suc);
				}
				Absent{}
			}
		}
		Absent{}
	}
}

function notify(n : 0..N, ndash : 0..N){
	match ring[n] {
		Present(data){
			if(data.predecessor == 8 || isNodeBetween(data.predecessor, data.nodeID, ndash, 0)){
				ring[n] = Present {nodeID : data.nodeID, predecessor : ndash, fingerTable : data.fingerTable};
			}
		}
		Absent{}
	}
}